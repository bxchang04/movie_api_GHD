Now that the client-side configuration is complete, go ahead and open the “index.js” that resides in your myFlix API project folder and import the path built-in Node module at the top of the file (const path = require("path");). You’ll be using this module in the upcoming steps.
Back in Achievement 2, you added the line app.use(express.static("public")); to your project (specifically, “index.js”), which allowed the server to serve any static files housed within the “public” folder. For instance, visiting “https://[APP_NAME].herokuapp.com/documentation.html” would open the “public/documentation.html” file and visiting “https://[APP_NAME].herokuapp.com/” or “https://[APP_NAME].herokuapp.com/index.html” would open the “public/index.html” file. You’ll be doing something similar to serve the static files within your “dist” folder when the “/client” endpoint is visited. For example, visiting “https://[APP_NAME].herokuapp.com/client” would open the “dist/index.html” file, which is the starting point of your React application (this is how visitors will open your application). Go ahead and add the code app.use("/client", express.static(path.join(__dirname, "client", "dist"))); right after the line app.use(express.static("public"));. Keep in mind that the path supplied to express.static is expecting “index.js” to be located in your root directory, “my-flix”. Also, this instruction is expecting the dist folder to be inside client folder. These two assumptions also hold for the next step.
NOTE!
Check the path.join documentation to learn more about how a file path can be provided to a method.

Now, you need to find a way to tell the API server that all client-side routes should be handled by sending the “dist/index.html” file. This is necessary because, for any request made to “https://[APP_NAME].herokuapp.com/client/[url-fragments]” (e.g., “https://[APP_NAME].herokuapp.com/client/movies/123”) will be handled by the server first—even if it looks like it’s supposed to be handled by the React router directly. This is because all requests must come through the server first to be processed. Then, the proper response is sent back to the request issuer/browser, just like any HTTP request (the default behavior). Thus, you need to tell the API server to route any similar routes to explicitly send back your “dist/index.html” file (the entry point of your production client application) so that they’ll be handled, instead, by the client application. The code you’ll need to implement (after the line added in step 5) to achieve this is:
app.get("/client/*", (req, res) => {
  res.sendFile(path.join(__dirname, "client", "dist", "index.html"));
});
Make sure the “dist” folder isn’t included in your myFlix API's “.gitignore” file, then commit the changes you’ve done so far and push them to GitHub and Heroku.
Now, if you visit “https://[APP_NAME].herokuapp.com/client” in your browser, it should open your React application!